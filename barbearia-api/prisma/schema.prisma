// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id           Int           @id @default(autoincrement())
  nome         String        @db.VarChar(100)
  telefone     String?       @db.VarChar(15)
  email        String        @unique @db.VarChar(100)
  senha        String        @db.VarChar(255)

  agendamentos Agendamento[]
  pagamentos   Pagamento[]

  @@map("cliente")
}

model Barbeiro {
  id           Int           @id @default(autoincrement())
  nome         String        @db.VarChar(100)
  telefone     String?       @db.VarChar(15)
  email        String        @unique @db.VarChar(100)
  senha        String        @db.VarChar(255)

  agendamentos Agendamento[]
  pagamentos   Pagamento[]

  @@map("barbeiro")
}

model StatusAgendamento {
  id           Int           @id @default(autoincrement())
  nome         String        @unique @db.VarChar(30) 

  agendamentos Agendamento[]
  
  @@map("status_agendamento")
}

model Agendamento {
  id           Int      @id @default(autoincrement())
  data         DateTime @db.Date
  hora         DateTime @db.Time(0) 
  servico      String   @db.VarChar(100) // Mantido como string
  dataCriacao  DateTime @default(now())
  
  // Chaves Estrangeiras (Foreign Keys)
  cliente_id   Int
  barbeiro_id  Int
  status_id    Int @default(1) // Assumindo que ID 1 Ã© o status 'pendente'

  // Relacionamentos (Para o Prisma Client)
  cliente      Cliente           @relation(fields: [cliente_id], references: [id])
  barbeiro     Barbeiro          @relation(fields: [barbeiro_id], references: [id])
  status       StatusAgendamento @relation(fields: [status_id], references: [id])
  
  pagamento    Pagamento? 

  @@map("agendamento")
  @@index([cliente_id])
  @@index([barbeiro_id])
}
model Pagamento {
  id             Int       @id @default(autoincrement())
  valor          Decimal   @db.Decimal(10, 2)
  tipo_pagamento String    @db.VarChar(50)
  data_pagamento DateTime  @default(now())

  
  cliente_id     Int
  barbeiro_id    Int
  agendamento_id Int @unique 

  // Relacionamentos
  cliente        Cliente     @relation(fields: [cliente_id], references: [id])
  barbeiro       Barbeiro    @relation(fields: [barbeiro_id], references: [id])
  agendamento    Agendamento @relation(fields: [agendamento_id], references: [id])

  @@map("pagamento")
}